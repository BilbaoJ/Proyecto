/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package trabajofinal;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.geom.AffineTransform;
import java.awt.print.PrinterException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

/**
 *
 * @author jessi
 */
public class frmGraphs extends javax.swing.JFrame {

    /**
     * Creates new form frmGraphs
     */
    public frmGraphs() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtJson = new javax.swing.JTextField();
        btnLeer = new javax.swing.JButton();
        panelGraph = new javax.swing.JPanel();
        btnLimpiar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbMatriz = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnLeer.setText("Leer y Generar");
        btnLeer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLeerActionPerformed(evt);
            }
        });

        panelGraph.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        panelGraph.setPreferredSize(new java.awt.Dimension(640, 360));

        javax.swing.GroupLayout panelGraphLayout = new javax.swing.GroupLayout(panelGraph);
        panelGraph.setLayout(panelGraphLayout);
        panelGraphLayout.setHorizontalGroup(
            panelGraphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 638, Short.MAX_VALUE)
        );
        panelGraphLayout.setVerticalGroup(
            panelGraphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 358, Short.MAX_VALUE)
        );

        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        tbMatriz.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tbMatriz);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(panelGraph, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(207, 207, 207)
                        .addComponent(txtJson, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(231, 231, 231)
                        .addComponent(btnLeer)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLimpiar))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelGraph, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(txtJson, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnLimpiar)
                    .addComponent(btnLeer))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLeerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLeerActionPerformed
        String json = txtJson.getText();
        JsonParser parser = new JsonParser();
        JsonObject gsonObj = parser.parse(json).getAsJsonObject();
        JsonObject nodos = gsonObj.getAsJsonObject("vl");
        JsonObject arcos = gsonObj.getAsJsonObject("el");
        Graph grafito = new Graph(nodos.size());
        
        Graphics g = panelGraph.getGraphics();
        drawEdges(g, arcos, nodos, grafito);
        drawNodes(g, nodos);
        showMatrix(grafito, nodos.size(), g);
    }//GEN-LAST:event_btnLeerActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        panelGraph.repaint();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    public void drawEdges(Graphics g, JsonObject arcos, JsonObject nodos, Graph grafito) {
        //se hace un recorrido para guardar y dibujar los arcos
        for (int i = 0; i < arcos.size(); i++) {
            //se obtiene el arco y sus valores
            JsonObject edge = arcos.getAsJsonObject(String.valueOf(i));
            int source = edge.get("u").getAsInt();
            int destination = edge.get("v").getAsInt();
            String weight = edge.get("w").getAsString();

            //se a침ade el arco
            grafito.addEdge(source, destination);

            //Para dibujar la linea, se obtiene la informaci칩n del nodo de fuente
            //y la informaci칩n del nodo de inicio
            JsonObject nodeS = nodos.getAsJsonObject(String.valueOf(source));
            JsonObject nodeD = nodos.getAsJsonObject(String.valueOf(destination));

            //Se obtienen los valores de X y Y de cada nodo
            int x1 = nodeS.get("x").getAsInt();
            int y1 = nodeS.get("y").getAsInt();
            int x2 = nodeD.get("x").getAsInt();
            int y2 = nodeD.get("y").getAsInt();

            //Se dibuja el arco que conecta a los nodos con su peso
            g.setColor(Color.red);
            drawArrow(g, x1, y1, x2, y2);
           
            //g.drawLine(x1, y1, x2, y2);
            
            g.setColor(Color.BLACK);
            g.drawString(weight, ((x1 + x2) / 2), ((y1 + y2) / 2));
        }
    }

    public void drawNodes(Graphics g, JsonObject nodos) {
        //Se hace un recorrido para dibujar los nodos
        for (int i = 0; i < nodos.size(); i++) {
            //Se obtiene el nodo y los valores para su posici칩n
            JsonObject node = nodos.getAsJsonObject(String.valueOf(i));
            int x = node.get("x").getAsInt();
            int y = node.get("y").getAsInt();

            //Se dibuja el nodo con su "nombre"
            g.setColor(Color.red);
            g.fillOval(x - 15, y - 15, 30, 30);
            g.setColor(Color.BLACK);
            g.drawString(String.valueOf(i), x, y);
        }
    }

    public void drawArrow(Graphics g1, int x1, int y1, int x2, int y2) {
        Graphics2D g = (Graphics2D) g1.create();

        double dx = x2 - x1, dy = y2 - y1;
        double angle = Math.atan2(dy, dx);
        int len = (int) Math.sqrt(dx * dx + dy * dy)-15;
        AffineTransform at = AffineTransform.getTranslateInstance(x1, y1);
        at.concatenate(AffineTransform.getRotateInstance(angle));
        g.transform(at);

        // Draw horizontal arrow starting in (0, 0)
        g.drawLine(0, 0, len, 0);
        int ARR_SIZE = 4;
        g.fillPolygon(new int[]{len, len - ARR_SIZE, len - ARR_SIZE, len},
                new int[]{0, -ARR_SIZE, ARR_SIZE, 0}, 4);
    }
    
    public void showMatrix(Graph myGraph, int size, Graphics g){
        
        /*
        DefaultTableModel model = (DefaultTableModel) tbMatriz.getModel();
        model.setRowCount(size+1);
        model.setColumnCount(size+1); 
        
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                if(i == 0 && j == 0){
                    
                }else if(i == 0){
                    
                    tbMatriz.setValueAt(j, i, j);
                }else if(j == 0){
                    tbMatriz.setValueAt(i, i, j);
                }else{
                    int value = myGraph.getaMatrix()[i][j] ? 1 : 0;
                    tbMatriz.setValueAt(value, i, j);
                }      
            }
        }
        
        
        
        String names[] = new String[size];
        for (int i = 0; i < size; i++){
            names[i] = String.valueOf(i);
        }
        Object matrix[][] = new Object[size][size];
        for(int i = 0; i < size; i++){
            for(int j = 0; j < size; j++){
             if(myGraph.getaMatrix()[i][j]){
                 matrix[i][j] = 1;
             }else{
                 matrix[i][j] = 0;
             }
            }
        }
        
        JTable tabla = new JTable(matrix, names);
        
        tbMatriz = tabla;
        tbMatriz.setShowGrid (true);
        tbMatriz.setVisible(true);
        tbMatriz.printComponents(g);
        */
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmGraphs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmGraphs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmGraphs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmGraphs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmGraphs().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLeer;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel panelGraph;
    private javax.swing.JTable tbMatriz;
    private javax.swing.JTextField txtJson;
    // End of variables declaration//GEN-END:variables
}
